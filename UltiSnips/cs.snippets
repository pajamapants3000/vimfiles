# Begin cs.snippets

# Snippets for coding in C#
snippet if      "if statement" b
if (${1:condition})
{
    ${2:block}
}
$0
endsnippet
snippet fo      "simple for loop counter" b
for (int ${1:i} = 0; $1 < ${2:range}; ++$1)
{
    $0
}
endsnippet
snippet for     "general for setup" b
for (${1:initialize}; ${2:test}; ${3:alter})
{
    $0
}
endsnippet
snippet do      "do-while loop" b
do
{
    $0
} while (${1:test});
endsnippet
snippet fe      "foreach" b
foreach (${1:var} in ${2:collection})
{
    ${3:loop body}
}
$0
endsnippet
snippet //      "single line comment"
// ${1:Enter_comment_here}

endsnippet
snippet /*      "basic comment"
/* ${1:Enter_comment_here} */$0
endsnippet
snippet /**     "multi-line comment"
/*
 * ${1:Enter_comment_here}
 */$0
endsnippet
snippet tc "try/catch" b
try
{
    ${1:code block}
}
catch (${2:Exception} ex)
{
    ${3:handle exception}
}
$0
endsnippet
snippet tf "try/finally" b
try
{
    ${1:code block}
}
finally
{
    ${4:final code to _always_ execute at the end}
}
$0
endsnippet
snippet tcc "try/catch/catch" b
try
{
    ${1:code block}
}
catch (${2:Exception} ex)
{
    ${3:handle exception}
}
catch (${4:Exception} ex)
{
    ${5:handle exception}
}
$0
endsnippet
snippet tccc "try/catch/catch/catch" b
try
{
    ${1:code block}
}
catch (${2:Exception} ex)
{
    ${3:handle exception}
}
catch (${4:Exception} ex)
{
    ${5:handle exception}
}
catch (${6:Exception} ex)
{
    ${7:handle exception}
}
$0
endsnippet
snippet tcf "try/catch/finally" b
try
{
    ${1:code block}
}
catch (${2:Exception} ex)
{
    ${3:handle exception}
}
finally
{
    ${4:final code to _always_ execute at the end}
}
$0
endsnippet
snippet tccf "try/catch/catch/finally" b
try
{
    ${1:code block}
}
catch (${2:Exception} ex)
{
    ${3:handle exception}
}
catch (${4:Exception} ex)
{
    ${5:handle exception}
}
finally
{
    ${6:final code to _always_ execute at the end}
}
$0
endsnippet
snippet tcccf "try/catch/catch/catch/finally" b
try
{
    ${1:code block}
}
catch (${2:Exception} ex)
{
    ${3:handle exception}
}
catch (${4:Exception} ex)
{
    ${5:handle exception}
}
catch (${6:Exception} ex)
{
    ${7:handle exception}
}
finally
{
    ${8:final code to _always_ execute at the end}
}
$0
endsnippet


snippet cc      "ConsoleColor" w
ConsoleColor
endsnippet
snippet cww     "Console.WindowWidth" w
Console.WindowWidth
endsnippet
snippet clww    "Console.LargestWindowWidth" w
Console.LargestWindowWidth
endsnippet
snippet cfc     "Console.ForegroundColor" w
Console.ForegroundColor
endsnippet
snippet cbc     "Console.BackgroundColor" w
Console.BackgroundColor
endsnippet
snippet ccl     "Console.CursorLeft" w
Console.CursorLeft
endsnippet
snippet ccr     "Console.CursorRight" w
Console.CursorRight
endsnippet
snippet cwl     "Console.WriteLine" w
Console.WriteLine (${1:output string})$0
endsnippet
snippet cwl"    "Console.WriteLine" w
Console.WriteLine ("${1:output string}")$0
endsnippet
snippet cw      "Console.Write" w
Console.Write (${1:output string})$0
endsnippet
snippet cw"     "Console.Write" w
Console.Write ("${1:output string}")$0
endsnippet
snippet sb      "StringBuilder" w
StringBuilder
endsnippet
snippet ccul    "CurrentCulture" w
CurrentCulture
endsnippet
snippet icul    "InvariantCulture" w
InvariantCulture
endsnippet
snippet nsty    "NumberStyles" w
NumberStyles
endsnippet
snippet tb6s    "ToBase64String" w
ToBase64String
endsnippet
snippet fb6s    "FromBase64String" w
FromBase64String
endsnippet
snippet xdtsm   "XmlDateTimeSerializationMode" w
XmlDateTimeSerializationMode
endsnippet
snippet tcv     "TypeConverter" w
TypeConverter
endsnippet
snippet bcv     "BitConverter" w
BitConverter
endsnippet
snippet bcv.gb  "BitConverter.GetBytes" w
BitConverter.GetBytes
endsnippet
snippet s.dy    "System.Dynamic" w
System.Dynamic
endsnippet
snippet s.g     "System.Globalization" w
System.Globalization
endsnippet
snippet s.nu    "System.Numerics" w
System.Numerics
endsnippet
snippet s.ti    "System.Timers" w
System.Timers
endsnippet
snippet bi      "BigInteger" w
BigInteger
endsnippet
snippet tost    "ToString" w
ToString(${1:arguments})%0
endsnippet
snippet ghc     "GetHashCode" w
GetHashCode
endsnippet
snippet psi     "ProcessStartInfo" w
ProcessStartInfo
endsnippet

# Namespaces
snippet s.o     "System.Object" w
System.Object
endsnippet
snippet s.cm    "System.ComponentModel" w
System.ComponentModel
endsnippet
snippet s.dr    "System.Drawing" w
System.Drawing
endsnippet
snippet s.d     "System.Data" w
System.Data
endsnippet
snippet s.i     "System.IO" w
System.IO
endsnippet
snippet s.l     "System.Linq" w
System.Linq
endsnippet
snippet s.d.l   "System.Device.Location" w
System.Device.Location
endsnippet
snippet s.a     "System.Activities" w
System.Activities
endsnippet
snippet s.ai    "System.AddIn" w
System.Activities
endsnippet
snippet s.cd    "System.CodeDom" w
System.CodeDom
endsnippet
snippet s.c     "System.Collections" w
System.Collections
endsnippet
snippet s.con   "System.Configuration" w
System.Configuration
endsnippet
snippet s.dep   "System.Deployment" w
System.Deployment
endsnippet
snippet s.dia   "System.Diagnostics" w
System.Diagnostics
endsnippet
snippet s.ds    "System.DirectoryServices" w
System.DirectoryServices
endsnippet
snippet s.es    "System.EnterpriseServices" w
System.EnterpriseServices
endsnippet
snippet s.im    "System.IdentityModel" w
System.IdentityModel
endsnippet
snippet s.ma    "System.Management" w
System.Management
endsnippet
snippet s.m     "System.Media" w
System.Media
endsnippet
snippet s.me    "System.Messaging" w
System.Messaging
endsnippet
snippet s.n     "System.Net" w
System.Net
endsnippet
snippet s.p     "System.Printing" w
System.Printing
endsnippet
snippet s.r     "System.Reflection" w
System.Reflection
endsnippet
snippet s.re    "System.Resources" w
System.Resources
endsnippet
snippet s.ru    "System.Runtime" w
System.Collections
endsnippet
snippet s.se    "System.Security" w
System.Security
endsnippet
snippet s.sm    "System.ServiceModel" w
System.ServiceProcess
endsnippet
snippet s.sp    "System.ServiceProcess" w
System.Collections
endsnippet
snippet s.s     "System.Speech" w
System.Speech
endsnippet
snippet s.t     "System.Text" w
System.Text
endsnippet
snippet s.th    "System.Threading" w
System.Threading
endsnippet
snippet s.tr    "System.Transactions" w
System.Transactions
endsnippet
snippet s.w     "System.Web" w
System.Web
endsnippet
snippet s.wi    "System.Windows" w
System.Windows
endsnippet
snippet s.wo    "System.Workflow" w
System.Workflow
endsnippet
snippet s.xa    "System.Xaml" w
System.Xaml
endsnippet
snippet s.x     "System.Xml" w
System.Xml
endsnippet
snippet s.se.c  "System.Security.Cryptography" w
System.Security.Cryptography
endsnippet
snippet s.e     "System.Enum" w
System.Enum
endsnippet
snippet s.en    "System.Environment" w
System.Environment
endsnippet

# Date & Time
snippet dt      "DateTime" w
DateTime
endsnippet
snippet dto     "DateTimeOffset" w
DateTimeOffset
endsnippet
snippet ts      "TimeSpan" w
TimeSpan
endsnippet
snippet tz      "TimeZone" w
TimeZone
endsnippet
snippet tzi     "TimeZoneInfo" w
TimeZoneInfo
endsnippet

# Interfaces
snippet ie      "IEnumerable" w
IEnumerable
endsnippet
snippet ie<     "IEnumerable<T>" w
IEnumerable<${1:T}>$0
endsnippet
snippet ien      "IEnumerator" w
IEnumerator
endsnippet
snippet ien<     "IEnumerator<T>" w
IEnumerator<${1:T}>$0
endsnippet
snippet id      "IDisposable" w
IDisposable
endsnippet
snippet id<     "IDisposable<T>" w
IDisposeable<${1:T}>$0
endsnippet
snippet ift     "IFormattable" w
IFormattable
endsnippet
snippet if<     "IFormattable<T>" w
IFormatteable<${1:T}>$0
endsnippet
snippet ifp     "IFormatProvider" w
IFormatProvider
endsnippet
snippet icf     "ICustomFormatter" w
ICustomFormatter
endsnippet
snippet icv     "IConvertible" w
IConvertible
endsnippet
snippet ise     "IStructuralEquatable" w
IStructuralEquatable
endsnippet
snippet ieq     "IEquatable" w
IEquatable
endsnippet
snippet ieq<    "IEquatable<T>" w
IEquatable<T>
endsnippet
snippet i><     "IComparable" w
IComparable
endsnippet
snippet i><<    "IComparable<T>" w
IComparable<T>
endsnippet
snippet icm     "IComparer" w
IComparer
endsnippet
snippet icm<    "IComparer<T>" w
IComparer<T>
endsnippet

# Format Providers
snippet culi    "CultureInfo" w
CultureInfo
endsnippet
snippet nfi     "NumberFormatInfo" w
NumberFormatInfo
endsnippet
snippet dtfi    "DateTimeFormatInfo" w
DateTimeFormatInfo
endsnippet
snippet ns      "NumberStyles" w
NumberStyles
endsnippet
snippet dts     "DateTimeStyles" w
DateTimeStyles
endsnippet

# IL and Dynamic Code Generation
snippet gem     "IL emit, no arguments"
${1:gen}.Emit(OpCodes.${2:opcode});
endsnippet
snippet gem1    "IL emit, one argument"
${1:gen}.Emit(OpCodes.${2:opcode}, ${3:arg});
endsnippet
snippet gemld   "IL emit - load local variable"
${1:gen}.Emit(OpCodes.Ldloc, ${2:arg});
endsnippet
snippet gemst   "IL emit - store local variable"
${1:gen}.Emit(OpCodes.Stloc, ${2:arg});
endsnippet
snippet gewl    "IL emit - writeline"
${1:gen}.EmitWriteLine(${2:stringVar});
endsnippet
snippet dym     "create dynamic method" b
var ${1:dynMeth} = new DynamicMethod(
    "${2:Method name}",
    ${3:Return type - e.g. typeof(int) or null},
    ${4:Parameter type(s) - e.g. new[] { typeof(int), typeof(int) } or null},
    ${5:Owner type or typeof(void)}
    );
ILGenerator ${6:gen} = $1.GetILGenerator();

$0

$6.Emit(OpCodes.Ret);
$1.Invoke(${7:object}, ${8:array of arguments});
endsnippet
snippet dym0    "create simple dynamic method" b
var ${1:dynMeth} = new DynamicMethod( "${2:Method name}", null, null, typeof (void));
ILGenerator ${6:gen} = $1.GetILGenerator();

$0

$6.Emit(OpCodes.Ret);
$1.Invoke(null, null);
endsnippet
snippet dtc     "create dynamic try/catch" b
MethodInfo ${1:getMessageProp} = typeof( ${2:Exception} )
                                 .GetProperty( "Message" ).GetGetMethod();
MethodInfo ${3:writeLineString} = typeof( Console ).GetMethod ( "WriteLine" ),
                                            new[] { typeof (object) } );
${4:gen}.BeginExceptionBlock();
    ConstructorInfo ${5:ci} = typeof ($2.GetConstructor(
                                                  new ${6:Type[0]} );
    $4.Emit( OpCodes.Newobj, $5 );
    $4.Emit( OpCodes.Throw );
$4.BeginCatchBlock( typeof( $2 ) );
    $4.Emit( OpCodes.Callvirt, $1 )
    $4.Emit( OpCodes.Call, $3 )
$4.EndExceptionBlock();
$0
endsnippet
snippet dtf     "create dynamic try/finally" b
${1:gen}.BeginExceptionBlock();
    ${2:dynamic code block}
$1.BeginFinallyBlock();
    $1.EmitWriteLine( "Finally" );
$1.EndExceptionBlock();
$0
endsnippet
snippet dtcc    "create dynamic try/catch/catch" b
MethodInfo ${1:getMessageProp1} = typeof( ${2:Exception} )
                                 .GetProperty( "Message" ).GetGetMethod();
MethodInfo ${3:getMessageProp2} = typeof( ${4:Exception} )
                                 .GetProperty( "Message" ).GetGetMethod();
MethodInfo ${5:writeLineString} = typeof( Console ).GetMethod ( "WriteLine" ),
                                            new[] { typeof (object) } );
${6:gen}.BeginExceptionBlock();
    ConstructorInfo ${7:ci} = typeof ($2.GetConstructor(
                                                  new ${8:Type[0]} );
    $6.Emit( OpCodes.Newobj, $7 );
    $6.Emit( OpCodes.Throw );
$6.BeginCatchBlock( typeof( $2 ) );
    $6.Emit( OpCodes.Callvirt, $1 )
    $6.Emit( OpCodes.Call, $5 )
$6.BeginCatchBlock( typeof( $4 ) );
    $6.Emit( OpCodes.Callvirt, $3 )
    $6.Emit( OpCodes.Call, $5 )
$6.EndExceptionBlock();
$0
endsnippet
snippet dtccc   "create dynamic try/catch/catch/catch" b
MethodInfo ${1:getMessageProp1} = typeof( ${2:Exception} )
                                 .GetProperty( "Message" ).GetGetMethod();
MethodInfo ${3:getMessageProp2} = typeof( ${4:Exception} )
                                 .GetProperty( "Message" ).GetGetMethod();
MethodInfo ${5:getMessageProp2} = typeof( ${6:Exception} )
                                 .GetProperty( "Message" ).GetGetMethod();
MethodInfo ${7:writeLineString} = typeof( Console ).GetMethod ( "WriteLine" ),
                                            new[] { typeof (object) } );
${8:gen}.BeginExceptionBlock();
    ConstructorInfo ${9:ci} = typeof ($2.GetConstructor(
                                                  new ${10:Type[0]} );
    $8.Emit( OpCodes.Newobj, $7 );
    $8.Emit( OpCodes.Throw );
$8.BeginCatchBlock( typeof( $2 ) );
    $8.Emit( OpCodes.Callvirt, $1 )
    $8.Emit( OpCodes.Call, $7 )
$8.BeginCatchBlock( typeof( $4 ) );
    $8.Emit( OpCodes.Callvirt, $3 )
    $8.Emit( OpCodes.Call, $7 )
$8.BeginCatchBlock( typeof( $6 ) );
    $8.Emit( OpCodes.Callvirt, $5 )
    $8.Emit( OpCodes.Call, $7 )
$8.EndExceptionBlock();
$0
endsnippet
snippet dtcf    "create dynamic try/catch/finally" b
MethodInfo ${1:getMessageProp} = typeof( ${2:Exception} )
                                 .GetProperty( "Message" ).GetGetMethod();
MethodInfo ${3:writeLineString} = typeof( Console ).GetMethod ( "WriteLine" ),
                                            new[] { typeof (object) } );
${4:gen}.BeginExceptionBlock();
    ConstructorInfo ${5:ci} = typeof ($2.GetConstructor(
                                                  new ${6:Type[0]} );
    $4.Emit( OpCodes.Newobj, $5 );
    $4.Emit( OpCodes.Throw );
$4.BeginCatchBlock( typeof( $2 ) );
    $4.Emit( OpCodes.Callvirt, $1 )
    $4.Emit( OpCodes.Call, $3 )
$4.BeginFinallyBlock();
    $4.EmitWriteLine( "Finally" );
$4.EndExceptionBlock();
$0
endsnippet
snippet dtccf   "create dynamic try/catch/catch/finally" b
MethodInfo ${1:getMessageProp1} = typeof( ${2:Exception} )
                                 .GetProperty( "Message" ).GetGetMethod();
MethodInfo ${3:getMessageProp2} = typeof( ${4:Exception} )
                                 .GetProperty( "Message" ).GetGetMethod();
MethodInfo ${5:writeLineString} = typeof( Console ).GetMethod ( "WriteLine" ),
                                            new[] { typeof (object) } );
${6:gen}.BeginExceptionBlock();
    ConstructorInfo ${7:ci} = typeof ($2.GetConstructor(
                                                  new ${8:Type[0]} );
    $6.Emit( OpCodes.Newobj, $7 );
    $6.Emit( OpCodes.Throw );
$6.BeginCatchBlock( typeof( $2 ) );
    $6.Emit( OpCodes.Callvirt, $1 )
    $6.Emit( OpCodes.Call, $5 )
$6.BeginCatchBlock( typeof( $4 ) );
    $6.Emit( OpCodes.Callvirt, $3 )
    $6.Emit( OpCodes.Call, $5 )
$6.BeginFinallyBlock();
    $6.EmitWriteLine( "Finally" );
$6.EndExceptionBlock();
$0
endsnippet
snippet dtcccf  "create dynamic try/catch/catch/catch/finally" b
MethodInfo ${1:getMessageProp1} = typeof( ${2:Exception} )
                                 .GetProperty( "Message" ).GetGetMethod();
MethodInfo ${3:getMessageProp2} = typeof( ${4:Exception} )
                                 .GetProperty( "Message" ).GetGetMethod();
MethodInfo ${5:getMessageProp2} = typeof( ${6:Exception} )
                                 .GetProperty( "Message" ).GetGetMethod();
MethodInfo ${7:writeLineString} = typeof( Console ).GetMethod ( "WriteLine" ),
                                            new[] { typeof (object) } );
${8:gen}.BeginExceptionBlock();
    ConstructorInfo ${9:ci} = typeof ($2.GetConstructor(
                                                  new ${10:Type[0]} );
    $8.Emit( OpCodes.Newobj, $7 );
    $8.Emit( OpCodes.Throw );
$8.BeginCatchBlock( typeof( $2 ) );
    $8.Emit( OpCodes.Callvirt, $1 )
    $8.Emit( OpCodes.Call, $7 )
$8.BeginCatchBlock( typeof( $4 ) );
    $8.Emit( OpCodes.Callvirt, $3 )
    $8.Emit( OpCodes.Call, $7 )
$8.BeginCatchBlock( typeof( $6 ) );
    $8.Emit( OpCodes.Callvirt, $5 )
    $8.Emit( OpCodes.Call, $7 )
$8.BeginFinallyBlock();
    $8.EmitWriteLine( "Finally" );
$8.EndExceptionBlock();
$0
endsnippet

